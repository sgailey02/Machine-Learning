# -*- coding: utf-8 -*-
"""LogisticRegressionDataEx.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lnu40UeIkJ6CezHQftxFiqXlpst2q4nh
"""

#https://www.datacamp.com/community/tutorials/understanding-logistic-regression-python

#import pandas
from io import StringIO, BytesIO
from zipfile import ZipFile
#from StringIO import StringIO
#import urllib2
from urllib.request import urlopen
import pandas as pd
from sklearn.model_selection import train_test_split


col_names = ['pregnant', 'glucose', 'bp', 'skin', 'insulin', 'bmi', 'pedigree', 'age', 'label']
#load dataset
#https://www.kaggle.com/kumargh/pimaindiansdiabetescsv
url = "https://gist.githubusercontent.com/ktisha/c21e73a1bd1700294ef790c56c8aec1f/raw/819b69b5736821ccee93d05b51de0510bea00294/pima-indians-diabetes.csv"
pima = pd.read_csv(url, header=None, names=col_names, skiprows=9)
print(pima.shape)
pima.head()

#Data correlation matrix:
#The values range from -1 to 1 and 
#the closer a value is to 1 the better correlation 
#there is between two characteristics.
corr = pima.corr()
corr

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import seaborn as sns  # https://seaborn.pydata.org/introduction.html
sns.heatmap(corr, annot = True)

#visualize
import matplotlib.pyplot as plt
pima.hist(bins=20, figsize=(20, 15))
plt.show()

#split dataset in features and target variable
feature_cols = ['pregnant', 'insulin', 'bmi', 'age','glucose','bp','pedigree']
X = pima[feature_cols] # Features
y = pima.label # Target variable

# split X and y into training and testing sets: 80% & 20%
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.20,random_state=0)

# import the class from scikit
from sklearn.linear_model import LogisticRegression

# instantiate the model (using the default parameters)
logreg = LogisticRegression()

# fit the model with data
logreg.fit(X_train,y_train)   #training

#Use test to make prediciotn about y
y_pred=logreg.predict(X_test)
y_pred

# import the metrics class
from sklearn import metrics
#Diagonal values represent accurate predictions, 
#while non-diagonal elements are inaccurate predictions. 
cnf_matrix = metrics.confusion_matrix(y_test, y_pred)
cnf_matrix

# Commented out IPython magic to ensure Python compatibility.
#Visualizing Confusion Matrix using Heatmap
# import 
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

class_names=[0,1] # name  of 2 classes
fig, ax = plt.subplots()
tick_marks = np.arange(len(class_names))
plt.xticks(tick_marks, class_names)
plt.yticks(tick_marks, class_names)
# create heatmap
sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap="YlGnBu" ,fmt='g')
ax.xaxis.set_label_position("top")
plt.tight_layout()
plt.title('Confusion matrix', y=1.1)
plt.ylabel('Actual label')
plt.xlabel('Predicted label')

#Confusion Matrix Evaluation Metrics
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
print("Precision:",metrics.precision_score(y_test, y_pred))
print("Recall:",metrics.recall_score(y_test, y_pred))

#ROC curve 
#is a plot of the true positive rate against the false positive rate. 
# sensitivity vs specificity

y_pred_proba = logreg.predict_proba(X_test)[::,1]
fpr, tpr, _ = metrics.roc_curve(y_test,  y_pred_proba)
auc = metrics.roc_auc_score(y_test, y_pred_proba)
plt.plot(fpr,tpr,label="data 1, auc="+str(auc))
plt.legend(loc=4)
plt.show()